#!/bin/bash
# -*- sh -*-

function die()
{
	 local msg=$1
	 echo ${msg} >&2
	 exit 1
}

##
# Tries to find a project file, starting from the current directory
#
function seekProjectRec()
{
    [ `pwd` -ef '/' ] && exit 0

    ([ -f "project.ysr" ] && echo -n "project.ysr") ||
      (echo -n ../ && (cd .. && seekProjectRec))
}

##
# Argument processing

##
# load configuration file
#

YSR_rc="${HOME}/.ysrrc"
[ -f "${YSR_rc}" ] && . ${YSR_rc}

##
# initialize variables
#

YSR_cpu_cores=${YSR_cpu_cores:-1}
YSR_lib=${YSR_lib:-$(dirname $(dirname $0))/lib}
YSR_show_dont_do=${YSR_show_dont_do:-false}
YSR_make_command=${YSR_make_command:-make}

[ -d "${YSR_lib}" ] || die "Cannot find library directory: ${YSR_lib}"

YSR_project_file=`seekProjectRec`

##
# setup make execution
#

if [ ! -f "${YSR_project_file}" ]; then
    YSR_project_file=
fi

if [ -f "Makefile.ysr" ]; then
    YSR_makefile=Makefile.ysr
fi

declare -i jobs

jobs="${YSR_cpu_cores} + 1"

PARALLISM="--jobs ${jobs}"
INCLUDES="--include-dir ${YSR_lib}"

if [ -f "${YSR_makefile}" ]; then
MAKEOPTS+="-f ${YSR_makefile}"
fi
MAKEOPTS+=" ${PARALLISM} ${INCLUDES}"
MAKEOPTS+=" YSR.libdir="${YSR_lib}""
MAKEOPTS+=" YSR.bin="$0""
MAKEOPTS+=" YSR.project.file="${YSR_project_file}""
MAKEOPTS+=" YSR.make="${YSR_make_command}""

if ${YSR_show_dont_do}; then
    show=echo
else
    show=
fi

##
# let gnu make do its job

exec ${show} ${YSR_make_command} ${MAKEOPTS} "$@"
