ifndef scripts_library
scripts_library=1

include $(YSR.libdir)/functions/template-functions.mk

##
# Create rules to build a dynamic library named after the given
# parameter.
#
# - objects are derived from <library_name>_OBJS
#
# - additional dependencies can be provided via <library_name>_DEPS
# - modules can be imported via <library_name>_REQUIRES
# - <library_name>_LIBNAME may be overriden if you want to change the
#   base name
# - <library_name>_BUNDLE_EXT may be overriden to customize the
#   bundle's extension (OSX)
#
# compilation variables will be altered to take those dependencies
# into account.
#
# The function will export rules:
#
# <library_name> (compile the library)
#
# and variables:
#
# <library_name>_LIBNAME
# <library_name>_LIBDIR
#
# to use in programs.

##
# call these to create your library

##
# Create a C language shared library.
#
# @param $(1) name of the library
ysr-add-c-lib-shared=$(eval $(call ysrprv-lib-rule-template,$(1),c,shared))

##
# Create a C++ language shared library.
#
# @param $(1) name of the library
ysr-add-c++-lib-shared=$(eval $(call ysrprv-lib-rule-template,$(1),c++,shared))

##
# Create a C language static library.
#
# @param $(1) name of the library
ysr-add-c-lib-static=$(eval $(call ysrprv-lib-rule-template,$(1),c,static))

##
# Create a C++ language static library.
#
# @param $(1) name of the library
ysr-add-c++-lib-static=$(eval $(call ysrprv-lib-rule-template,$(1),c++,static))

# only for OSX
# $(1) library name for the bundle. Used to lookup variables.
#
# <library-name>_BUNDLE_PACKAGE : name of the package used (url style)
# <library-name>_LIBNAME        : name of the library / component file
#
# will export
# <library-name>_BUNDLE : location / name of the bundle
#

##
# Create a C language OSX bundle library
# @param $(1) name of the bundle
ysr-add-c-bundle=$(eval $(call ysrprv-lib-rule-template,$(1),c,bundle))

##
# Create a C++ language OSX bundle library
# @param $(1) name of the bundle
ysr-add-c++-bundle=$(eval $(call ysrprv-lib-rule-template,$(1),c++,bundle))

##
# @private
# ysrprv-lib-rule-template : when 'evaled' will add rules to build the
# provided "library"
#
# $(1) : name of the library
# $(2) : language (c++, c)
# $(3) : type (shared, static) or bundle (OSX only)
#
# requires <library_name>_OBJS <library_name>_DEPS <library_name>_REQUIRES

define ysrprv-lib-rule-template

$(1)_LIBNAME?=$(subst .,-,$(1))
$(1)_LIB:=$$(call to-lib-$$(ARCH)-$(3),$$(DEST)/$(1)/$$($(1)_LIBNAME))
$(1)_LIBDIR=$$(dir $$($(1)_LIB))

## find out everything about the required modules
$(1)_private_REQUIRES:=$$(call ysr-prv-walk-requires,$(1))
$$(call ysr-prv-requires-all,$$($(1)_private_REQUIRES),$(1),$(2))

##
# function importing variables from dependencies
# $(1) is the variable suffix to import.
#
# The core version of the variable are also appended
#
$(1)_import=$$(call ysr-prefixing-references,$$(1),GLOBAL $(1) $$($(1)_private_REQUIRES))

$(1)_all_DEPS:=$$(call $(1)_import,DEPS)
$(1)_all_OBJS:=$$(call $(1)_import,OBJS)
$(1)_all_CFLAGS:=$$(call $(1)_import,CFLAGS)
$(1)_all_OFLAGS:=$$(call $(1)_import,OFLAGS)
$(1)_all_CXXFLAGS:=$$(call $(1)_import,CXXFLAGS)
$(1)_all_LDFLAGS:=$$(call $(1)_import,LDFLAGS)
$(1)_all_LDXXFLAGS:=$$(call $(1)_import,LDXXFLAGS)

ifeq ($(3),shared)
ifneq ($(ARCH),WIN32)
$(1)_all_CFLAGS+=-fPIC
$(1)_all_CXXFLAGS+=-fPIC
endif

ifeq ($(ARCH),MACOSX)
$(1)_all_LDFLAGS+=-dynamiclib
else ifeq ($(ARCH),WIN32)
$(1)_all_LDFLAGS+=-shared
#mdll
else
$(1)_all_LDFLAGS+=-shared
endif
endif

ifeq ($(3),bundle)
	$(1)_all_LDFLAGS+=-bundle
endif

$(1)_all_FRAMEWORKS:=$$(call $(1)_import,FRAMEWORKS)
$(1)_all_INCLUDES:=$$(call $(1)_import,INCLUDES)
$(1)_all_DEFINES:=$$(call $(1)_import,DEFINES)
$(1)_all_LIBSPATH:=$$(call $(1)_import,LIBSPATH)
$(1)_all_LIBS:=$$(call $(1)_import,LIBS)
$(1)_all_DATAFILES:=$$(strip $$(call $(1)_import,DATAFILES))

ALL_LIB_NAMES+=$(1)
ALL_LIBS+=$$($(1)_LIB)

# autogenerated dependencies are found in .dep files
$(1)_MKDEP:=$$(patsubst %.o,%.o.dep,$$(filter %.o,$$($(1)_all_OBJS)))

# how to build the program
$$($(1)_LIB): CFLAGS=$$($(1)_all_CFLAGS)
$$($(1)_LIB): OFLAGS=$$($(1)_all_OFLAGS)
$$($(1)_LIB): CXXFLAGS=$$($(1)_all_CXXFLAGS)
$$($(1)_LIB): INCLUDES=$$($(1)_all_INCLUDES)
$$($(1)_LIB): DEFINES=$$($(1)_all_DEFINES)
$$($(1)_LIB): LIBS=$$($(1)_all_LIBS)
$$($(1)_LIB): LIBSPATH=$$($(1)_all_LIBSPATH)
$$($(1)_LIB): LDFLAGS=$$($(1)_all_LDFLAGS)
$$($(1)_LIB): LDXXFLAGS=$$($(1)_all_LDXXFLAGS)
$$($(1)_LIB): FRAMEWORKS=$$($(1)_all_FRAMEWORKS)

$$($(1)_MKDEP): INCLUDES=$$($(1)_all_INCLUDES)
$$($(1)_MKDEP): DEFINES=$$($(1)_all_DEFINES)

$$($(1)_LIB): $$($(1)_MKDEP)
$$($(1)_LIB): $$($(1)_all_DEPS) $$($(1)_all_OBJS)
	@$$(call require-directory,$$(dir $$@))
	@$$(call link-$(2)-$(3)-$(COMPILER_FAMILY),$$(filter %.o,$$^),$$@,)

ifeq ($(3),bundle)
$(1)_BUNDLE_PACKAGE?=com.uucidl.ln2.$(1)

$(1)_BUNDLENAME:=$$(notdir $$($(1)_LIB))
$(1)_BUNDLE_EXT?=.component
$(1)_BUNDLE:=$$($(1)_LIB)$$($(1)_BUNDLE_EXT)

$(1)-bundle: $$($(1)_LIB)
	$(TOP)/scripts/$(ARCH)/make-library-bundle.rb $$($(1)_BUNDLE_PACKAGE) $$($(1)_LIB) $$($(1)_BUNDLE_EXT) $$($(1)_all_SHLIBS) $$($(1)_all_DATAFILES)

$(1): $(1)-bundle
else
$(1): $$($(1)_LIB)
	@$$(call require-directory,$$(dir $$($(1)_LIB))/dat)
	[ -z "$$($(1)_all_DATAFILES)" ] || cp -r -f $$($(1)_all_DATAFILES) $$(dir $$($(1)_LIB))/dat

endif

$(1)-depclean:
	rm -f $$($(1)_MKDEP)

$(1)-clean: $(1)-depclean
	rm -f $$($(1)_all_OBJS)

$(1)-showdep:
	@echo $$($(1)_MKDEP)

clean: $(1)-clean
depclean: $(1)-depclean

.PHONY: $(1) $(1)-run $(1)-debug $(1)-clean $(1)-depclean

-include $$($(1)_MKDEP)

endef

LIBRARY_MK_WELCOME:=A number of libraries have been defined for this project:
LIBRARY_MK_WELCOME_RULES:=Use the following rules: <lib-name>-<rule>

LIBRARY_MK_RULES:=clean depclean showdep
LIBRARY_MK_DESCRIBE-build:=build the library
LIBRARY_MK_DESCRIBE-clean:=clean all objects and dependencies\n\t\t(may be useful in order to rebuild the library)
LIBRARY_MK_DESCRIBE-depclean:=clean the dependencies\n\t\t(may be useful in order to rebuild the library)

help-libs:
	@$(ysr-display-banner) "\n$(LIBRARY_MK_WELCOME)\n"
	@true $(foreach P,$(ALL_LIB_NAMES),&& $(ysr-display-banner) "\n\t$(P)")
	@$(ysr-display-banner) "\n\n$(LIBRARY_MK_WELCOME_RULES)"
	@$(ysr-display-banner) "\nWith rule amongst: $(LIBRARY_MK_RULES)\n"

help-rules-libs:
	@$(ysr-display-banner) "\n$(LIBRARY_MK_WELCOME_RULES)\n"
	@true $(foreach P,$(ALL_LIB_NAMES),&& $(ysr-display-banner) "\n\t$(P) -- $(LIBRARY_MK_DESCRIBE-build)" $(foreach R,$(LIBRARY_MK_RULES),&& $(ysr-display-banner) "\n\t$(P)-$(R) -- $(LIBRARY_MK_DESCRIBE-$(R))") && $(ysr-display-banner) "\n")

endif
